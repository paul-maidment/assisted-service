// Code generated by MockGen. DO NOT EDIT.
// Source: metricsManager.go

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"
	time "time"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ClusterInstallationFinished mocks base method.
func (m *MockAPI) ClusterInstallationFinished(ctx context.Context, result, prevState, clusterVersion string, clusterID strfmt.UUID, emailDomain string, installationStartedTime strfmt.DateTime) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterInstallationFinished", ctx, result, prevState, clusterVersion, clusterID, emailDomain, installationStartedTime)
}

// ClusterInstallationFinished indicates an expected call of ClusterInstallationFinished.
func (mr *MockAPIMockRecorder) ClusterInstallationFinished(ctx, result, prevState, clusterVersion, clusterID, emailDomain, installationStartedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInstallationFinished", reflect.TypeOf((*MockAPI)(nil).ClusterInstallationFinished), ctx, result, prevState, clusterVersion, clusterID, emailDomain, installationStartedTime)
}

// ClusterRegistered mocks base method.
func (m *MockAPI) ClusterRegistered() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterRegistered")
}

// ClusterRegistered indicates an expected call of ClusterRegistered.
func (mr *MockAPIMockRecorder) ClusterRegistered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRegistered", reflect.TypeOf((*MockAPI)(nil).ClusterRegistered))
}

// ClusterValidationChanged mocks base method.
func (m *MockAPI) ClusterValidationChanged(clusterValidationType models.ClusterValidationID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterValidationChanged", clusterValidationType)
}

// ClusterValidationChanged indicates an expected call of ClusterValidationChanged.
func (mr *MockAPIMockRecorder) ClusterValidationChanged(clusterValidationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterValidationChanged", reflect.TypeOf((*MockAPI)(nil).ClusterValidationChanged), clusterValidationType)
}

// ClusterValidationFailed mocks base method.
func (m *MockAPI) ClusterValidationFailed(clusterValidationType models.ClusterValidationID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterValidationFailed", clusterValidationType)
}

// ClusterValidationFailed indicates an expected call of ClusterValidationFailed.
func (mr *MockAPIMockRecorder) ClusterValidationFailed(clusterValidationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterValidationFailed", reflect.TypeOf((*MockAPI)(nil).ClusterValidationFailed), clusterValidationType)
}

// DiskSyncDuration mocks base method.
func (m *MockAPI) DiskSyncDuration(syncDuration int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DiskSyncDuration", syncDuration)
}

// DiskSyncDuration indicates an expected call of DiskSyncDuration.
func (mr *MockAPIMockRecorder) DiskSyncDuration(syncDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskSyncDuration", reflect.TypeOf((*MockAPI)(nil).DiskSyncDuration), syncDuration)
}

// Duration mocks base method.
func (m *MockAPI) Duration(operation string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Duration", operation, duration)
}

// Duration indicates an expected call of Duration.
func (mr *MockAPIMockRecorder) Duration(operation, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockAPI)(nil).Duration), operation, duration)
}

// FileSystemUsage mocks base method.
func (m *MockAPI) FileSystemUsage(usageInPercentage float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileSystemUsage", usageInPercentage)
}

// FileSystemUsage indicates an expected call of FileSystemUsage.
func (mr *MockAPIMockRecorder) FileSystemUsage(usageInPercentage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileSystemUsage", reflect.TypeOf((*MockAPI)(nil).FileSystemUsage), usageInPercentage)
}

// HostValidationChanged mocks base method.
func (m *MockAPI) HostValidationChanged(hostValidationType models.HostValidationID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostValidationChanged", hostValidationType)
}

// HostValidationChanged indicates an expected call of HostValidationChanged.
func (mr *MockAPIMockRecorder) HostValidationChanged(hostValidationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostValidationChanged", reflect.TypeOf((*MockAPI)(nil).HostValidationChanged), hostValidationType)
}

// HostValidationFailed mocks base method.
func (m *MockAPI) HostValidationFailed(hostValidationType models.HostValidationID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostValidationFailed", hostValidationType)
}

// HostValidationFailed indicates an expected call of HostValidationFailed.
func (mr *MockAPIMockRecorder) HostValidationFailed(hostValidationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostValidationFailed", reflect.TypeOf((*MockAPI)(nil).HostValidationFailed), hostValidationType)
}

// ImagePullStatus mocks base method.
func (m *MockAPI) ImagePullStatus(imageName, resultStatus string, downloadRate float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ImagePullStatus", imageName, resultStatus, downloadRate)
}

// ImagePullStatus indicates an expected call of ImagePullStatus.
func (mr *MockAPIMockRecorder) ImagePullStatus(imageName, resultStatus, downloadRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePullStatus", reflect.TypeOf((*MockAPI)(nil).ImagePullStatus), imageName, resultStatus, downloadRate)
}

// InstallationStarted mocks base method.
func (m *MockAPI) InstallationStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallationStarted")
}

// InstallationStarted indicates an expected call of InstallationStarted.
func (mr *MockAPIMockRecorder) InstallationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallationStarted", reflect.TypeOf((*MockAPI)(nil).InstallationStarted))
}

// InstallerCacheGetReleaseError mocks base method.
func (m *MockAPI) InstallerCacheGetReleaseError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheGetReleaseError")
}

// InstallerCacheGetReleaseError indicates an expected call of InstallerCacheGetReleaseError.
func (mr *MockAPIMockRecorder) InstallerCacheGetReleaseError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheGetReleaseError", reflect.TypeOf((*MockAPI)(nil).InstallerCacheGetReleaseError))
}

// InstallerCacheGetReleaseOK mocks base method.
func (m *MockAPI) InstallerCacheGetReleaseOK() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheGetReleaseOK")
}

// InstallerCacheGetReleaseOK indicates an expected call of InstallerCacheGetReleaseOK.
func (mr *MockAPIMockRecorder) InstallerCacheGetReleaseOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheGetReleaseOK", reflect.TypeOf((*MockAPI)(nil).InstallerCacheGetReleaseOK))
}

// InstallerCacheGetReleaseTimeout mocks base method.
func (m *MockAPI) InstallerCacheGetReleaseTimeout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheGetReleaseTimeout")
}

// InstallerCacheGetReleaseTimeout indicates an expected call of InstallerCacheGetReleaseTimeout.
func (mr *MockAPIMockRecorder) InstallerCacheGetReleaseTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheGetReleaseTimeout", reflect.TypeOf((*MockAPI)(nil).InstallerCacheGetReleaseTimeout))
}

// InstallerCachePrunedHardLink mocks base method.
func (m *MockAPI) InstallerCachePrunedHardLink() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCachePrunedHardLink")
}

// InstallerCachePrunedHardLink indicates an expected call of InstallerCachePrunedHardLink.
func (mr *MockAPIMockRecorder) InstallerCachePrunedHardLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCachePrunedHardLink", reflect.TypeOf((*MockAPI)(nil).InstallerCachePrunedHardLink))
}

// InstallerCacheReleaseCached mocks base method.
func (m *MockAPI) InstallerCacheReleaseCached(releaseID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheReleaseCached", releaseID)
}

// InstallerCacheReleaseCached indicates an expected call of InstallerCacheReleaseCached.
func (mr *MockAPIMockRecorder) InstallerCacheReleaseCached(releaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheReleaseCached", reflect.TypeOf((*MockAPI)(nil).InstallerCacheReleaseCached), releaseID)
}

// InstallerCacheReleaseEvicted mocks base method.
func (m *MockAPI) InstallerCacheReleaseEvicted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheReleaseEvicted")
}

// InstallerCacheReleaseEvicted indicates an expected call of InstallerCacheReleaseEvicted.
func (mr *MockAPIMockRecorder) InstallerCacheReleaseEvicted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheReleaseEvicted", reflect.TypeOf((*MockAPI)(nil).InstallerCacheReleaseEvicted))
}

// InstallerCacheReleaseExtracted mocks base method.
func (m *MockAPI) InstallerCacheReleaseExtracted(releaseID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheReleaseExtracted", releaseID)
}

// InstallerCacheReleaseExtracted indicates an expected call of InstallerCacheReleaseExtracted.
func (mr *MockAPIMockRecorder) InstallerCacheReleaseExtracted(releaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheReleaseExtracted", reflect.TypeOf((*MockAPI)(nil).InstallerCacheReleaseExtracted), releaseID)
}

// InstallerCacheTryEviction mocks base method.
func (m *MockAPI) InstallerCacheTryEviction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallerCacheTryEviction")
}

// InstallerCacheTryEviction indicates an expected call of InstallerCacheTryEviction.
func (mr *MockAPIMockRecorder) InstallerCacheTryEviction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerCacheTryEviction", reflect.TypeOf((*MockAPI)(nil).InstallerCacheTryEviction))
}

// MonitoredClusterCount mocks base method.
func (m *MockAPI) MonitoredClusterCount(monitoredClusters int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitoredClusterCount", monitoredClusters)
}

// MonitoredClusterCount indicates an expected call of MonitoredClusterCount.
func (mr *MockAPIMockRecorder) MonitoredClusterCount(monitoredClusters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitoredClusterCount", reflect.TypeOf((*MockAPI)(nil).MonitoredClusterCount), monitoredClusters)
}

// MonitoredHostsCount mocks base method.
func (m *MockAPI) MonitoredHostsCount(monitoredHosts int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitoredHostsCount", monitoredHosts)
}

// MonitoredHostsCount indicates an expected call of MonitoredHostsCount.
func (mr *MockAPIMockRecorder) MonitoredHostsCount(monitoredHosts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitoredHostsCount", reflect.TypeOf((*MockAPI)(nil).MonitoredHostsCount), monitoredHosts)
}

// ReportHostInstallationMetrics mocks base method.
func (m *MockAPI) ReportHostInstallationMetrics(ctx context.Context, clusterVersion string, clusterID strfmt.UUID, emailDomain string, boot *models.Disk, h *models.Host, previousProgress *models.HostProgressInfo, currentStage models.HostStage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportHostInstallationMetrics", ctx, clusterVersion, clusterID, emailDomain, boot, h, previousProgress, currentStage)
}

// ReportHostInstallationMetrics indicates an expected call of ReportHostInstallationMetrics.
func (mr *MockAPIMockRecorder) ReportHostInstallationMetrics(ctx, clusterVersion, clusterID, emailDomain, boot, h, previousProgress, currentStage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportHostInstallationMetrics", reflect.TypeOf((*MockAPI)(nil).ReportHostInstallationMetrics), ctx, clusterVersion, clusterID, emailDomain, boot, h, previousProgress, currentStage)
}
